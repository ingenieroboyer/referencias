VER LAS VERSIONES INSTALADAS
!pip freeze


CONECTAR CON MONGO

from pymongo import MongoClient
client = MongoClient('localhost', 27017)
db=client.get_database('pruebas')










IMPORTAR UNA BASE DE DATOS A UN DATAFRAME
import pymongo
import pandas as pd
from pymongo import MongoClient
client = MongoClient()
db = client.database_name
collection = db.collection_name
data = pd.DataFrame(list(collection.find()))


CREAR UNA COLECCIÓN
col=db.ficha


INSERTAR UN DATA FRAME A UNA COLLECTION





CONCATENAR DOS DATAFRAMES
frames = [personalCnn, personalChV]
result = pd.concat(frames)
	result es un dataframe con la suma de las filas de personalChV y personalCnn





SELECCIONAR FILAS
Con un valor
df.loc[df['column_name'] == some_value]

Con valores iterables
df.loc[df['column_name'].isin(some_values)]

Varias condiciones 
df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]

Excluyente
df.loc[df['column_name'] != some_value]


Maximizar
df['Name'].max()


ELIMINAR DUPLICADOS
df = df.drop_duplicates()



!!!!!!!!!!!!!!!!!!!!     AÑADIR UNA FUNCIÒN PARA PROCESAR LOS DATOS    !!!!!!!!!!!!!!!!!!!!!!!!

 

consindicato2["prueba"] = consindicato2["COL1"].fillna(df["COL2"])


////////////////////////////////////////////

GUARDAR 







-*-*/-*/-*/-*/   -*/-*-*/-*/-*/-*/   -*/-*-*/-*/-*/-*/   -*/-*-*/-*/-*/-*/   -*/
====>> FUNCION QUE PARTE EN PARTES LA CONSULTA, SOLO COMO REFERENCIA DE FUNCIPON QUE ITERA EL CURSOR

def read_mongo(db, 
           collection, query={}, 
           host='localhost', port=27017, 
           username=None, password=None,
           chunksize = 100, no_id=True):
#""" Read from Mongo and Store into DataFrame """

# Connect to MongoDB
#db = _connect_mongo(host=host, port=port, username=username, password=password, db=db)
    client = MongoClient(host=host, port=port)
# Make a query to the specific DB and Collection
    db_aux = client[db]

# Some variables to create the chunks
    skips_variable = range(0, db_aux[collection].find(query).count(), int(chunksize))
    if len(skips_variable)<=1:
        skips_variable = [0,len(skips_variable)]

# Iteration to create the dataframe in chunks.
            for i in range(1,len(skips_variable)):
    # Expand the cursor and construct the DataFrame
    #df_aux =pd.DataFrame(list(cursor_aux[skips_variable[i-1]:skips_variable[i]]))
            df_aux =pd.DataFrame(list(db_aux[collection].find(query)[skips_variable[i-1]:skips_variable[i]]))
    if no_id:
        del df_aux['_id']

    # Concatenate the chunks into a unique df
    if 'df' not in locals():
        df =  df_aux
    else:
        df = pd.concat([df, df_aux], ignore_index=True)
return df

-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/-*/
 

AÑADIR ELEMENTOS A UNA LISTA 

LIST=[]

Elemento a elemento:
fruits = ["Apple", "Banana"]
# 1. append()  
print(f'Current Fruits List {fruits}')
#Desde la entrada estandar
f = input("Please enter a fruit name:\n")
fruits.append(f)				<====  ! es como el push de Paython
print(f'Updated Fruits List {fruits}')

Elemento a elemento controlando la posición(indexado):
num_list = [1, 2, 3, 4, 5]
print(f'Current Numbers List {num_list}')

# Desde la entrada estandar
num = int(input("Please enter a number to add to list:\n"))
index = int(input(f'Please enter the index between 0 and {len(num_list) - 1} to add the number:\n'))

num_list.insert(index, num)                     <====  ! 
print(f'Updated Numbers List {num_list}')



Por extensión  
list_num = []
list_num.extend([1, 2])  # extending list elements
print(list_num)
list_num.extend((3, 4))  # extending tuple elements
print(list_num)
list_num.extend("ABC")  # extending string elements
print(list_num)







