CRUD

Crear un documento dentro de una collección
	var Tank = mongoose.model('Tank', yourSchema);
	var small = new Tank({ size: 'small' });
	small.save(function (err) {
		  if (err) return handleError(err);
		  // saved!
	});


****************
CAMBIAR NOMBRE DEL CAMPO	
db.trabajadores.update({}, {$rename:{"Apellido Paterno":"lastname"}}, false, true);


db.trabajadores.update({}, {$rename:{"Apellido Paterno":"lastname"}}, false, true);
{multi: true, safe: true} 

ELIMINAR CAMPO de un registro
	db.trabajadores.update({}, {$unset:{"Name":"name"}});
ELIMINAR UN REGISTRO
	db.getCollection("employee").deleteOne({name:'juncito'}) ;


ELIMINAR CAMPO de una colección
	db.trabajadores.update({},   {$unset: {'Tipo Contrato': true}},   {multi: true, safe: true} );



CREAR UN CAMPO EN TODOS LOS DOCUMENTOS
db.trabajadores.update({},   {$set: {company: CDF}},   {multi: true, safe: true} );

BORRAR UN CAMPO
db.posts.remove({"autor": "Francisco"})


DESCRIBIR UNA COLECCIÓN
> var esquema = db.sindicato.findOne();
> for(var key in esquema){print(key)};


GROUP   GROUP   GROUP   GROUP  GROUPGROUP

	 db.getCollection('orgs').aggregate([{$group:{_id:"$department"}}])

Agrupar y mostrar valores de los agrupados
	Workers.aggregate([{$group:{_id:"$department",info:{$push:{JobTitle:"$JobTitle",department:"$department",email:"$email"}}}}]);  !!!!!

	db.getCollection('workers').aggregate([{$group:{_id:"$department",persons: {$addToSet: "$JobTitle"},num_personas:{$sum:1}}}])




IMPORTAR
JSON
mongoimport --db erme --collection workers --type json --file /home/tecnoboy/TRABAJO/Contingencia/warnermedia-back-express/db/workers.json



CSV
mongoimport --db pruebas --collection cnnWorkers --type csv --headerline  --file /home/tecnoboy/CRECER/trato_data/data/trabajadadores/cnnPersonal.csv


EXPORTAR JSON
mongoexport --db erme --collection workers --type json --out /home/tecnoboy/PROYECTOS/warnermedia-back-express/db/workers.json








///////////////////////////  AGGREGATE //////////////////////

db.trabajadores.aggregate([{$match:{"rut":"8.210.877-7"}}]);



AÑADIR UNA COLECCIÒN COMO EMBEBIDA EN OTRA COLECCIÓN
db.worker.aggregate([
{
    $lookup: {itemDescription: { $concat: [ "machaza", " - ", "$company" ] }    }
        
},

        {$out : "wrokersallalin"  }
])



////
{ "_id" : 8751, "title" : "The Banquet", "author" : "Dante", "copies" : 2 }
{ "_id" : 8752, "title" : "Divine Comedy", "author" : "Dante", "copies" : 1 }
{ "_id" : 8645, "title" : "Eclogues", "author" : "Dante", "copies" : 2 }
{ "_id" : 7000, "title" : "The Odyssey", "author" : "Homer", "copies" : 10 }
{ "_id" : 7020, "title" : "Iliad", "author" : "Homer", "copies" : 10 }

	
////



db.cnnWorkers.aggregate([
{
    $lookup: { 
     from: "cnnAdmin", 
     localField: "rut", 
     foreignField: "rut", 
     as: "admin" 
    } 
        
},

        {$out : "workers"  }
])













////////////////
db.cnnWorkers.aggregate([{$lookup: { from: "cnnPersonal", localField: "rut", foreignField: "rut", as: "personal" } },{$out : "workers1"  }])






mongoimport --db erme --collection workers --file /home/tecnoboy/CRECER/trato_data/data/trabajadadores/cdfs.json


/home/tecnoboy/CRECER/trato_data/data/trabajadadores/ModeloDatos/Respaldos/workers.json

ELIMINAR UN CAMPO EN SUBDOCUMENTO 
	db.workers.updateMany( {}, { $unset: { "personal.0.rut": 1 } } )

ELIMINAR MUCHOS DOCUMENTOS
	db.getCollection('workers').deleteMany({company:'cdf'})	

BUSCAR CON CRITERIO DE EXCLUSION
	db.getCollection('workers4').find({lab_union:{$nin:['1','2','3','4','5','0']}})

BUSCAR CON CRITERIO DE FECHAS
	db.workers.find({'admin.0.discharge_date': {"$gte": "2019-10-01T15:00:00.000Z"}})

CAMBIAR VALOR DE CAMPO EN TODOS LOS DOCUMENTOS QUE CUMPLAN CON LA CONDICIÓN DEL $gte
	db.workers.update({'admin.0.discharge_date': {"$gte": "2019-10-01T15:00:00.000Z"}},{$set:{ 'admin.0.discharge_date':null}},{multi:true})


BUSCAR EXCLUYENDO CIERTOS CRITERIOS
db.workers.find( { company: { $nin: [ 'cnn', 'ChileVision','cdf' ] } } )




VALORES DIFERENTES DE UNA VARIABLE
UNICOS
	db.getCollection('finalmente').distinct("pais")

AGRUPAR CIERTOS VALORES EN NUEVA COLLECCIÓN
	db.workers.aggregate([{$group:{_id:"$Manager_ps",supervisados:{$push:"$$ROOT"}}},{$project:{"supervisados.admin": 0}},{ $out: "dimen_genre6" }]);


CUENTA DE VALORES  UNICOS
	resultado['email'].nunique()



EXPRESION REGURAR
	db.getCollection('workers').find({company:'cdf', email: /@turner/  })

VER SI  UN CAMPO NO EXISTE
	db.getCollection('piloto2_copy').find({lab_union:{$exists:false}}).count()

sw_variablepersona_201910010936



ELIMINAR MUCHOS

db.getCollection('dbtrabajo').deleteMany({valor:NaN},{multi:true})

CUANTOS REGISTROS EXISTEN DIFERENTES DE LA LISTA DE VALORES
db.getCollection('workers').find({ lab_union: { $exists: true, $nin: ['0','1','2','3','4','5'] }}).count()
		: incluye los valores donde el campo tiene null como valor

db.getCollection('CDFpiloto').find({sindicato:{$exists: true,$ne:[0,3]}}).count()

______ DESDE HACIA_____




EXPORTAR UNA COLECCIÒN COMO JSON
		mongoexport --db pruebas --collection workers2 --out workers.json


IMPORTAR UNA COLLECIÓN DE UN JSON
mongoimport --db erme --collection CDFpiloto --file CDFpiloto.json
 



mongoimport --db erme --collection roles --type json --file /home/staging/desarrollo/data/bdauxiliares_backend_erme/roles.json


EXPORTAR EL RESULTADO DE UN QUERY
	 mongoexport --db erme --collection nini --query '{}' --out  /home/tecnoboy/SOPORTE/miles_davis.json




EXPORTAR CSV
	1
mongoimport --db erme --collection supervisados6 --type csv --fields=_id,count --file ficheroImportar.csv




db.createUser({user: "lboyer",pwd: "dev20!",roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]})



















*/*/*/********************/////////////////


Instalar
!pip install pandas

FROM CSV
import pandas as pd
personal=pd.read_csv("ModeloDatos/sw_personal_201909131108.csv")
print(personal.rut.head(2))

FORMATEAR(quitar punto)
personal.rut=personal.rut.str.replace('.','')

FORMATEAR (quitar los ceros a la izquierda)
personal.rut=personal.rut.str.lstrip('0');

AÑADIR UNA COLUMNA
personal['firstname1']=personal.nombre.str.lower()

CONTAR LAS ENTRADAS DE UNA COLUMNA
personal.email.count()

ELIMINAR UNA COLUMNA
personal=personal.drop(['ficha','codEstudios','codCajaCompens','nombres','direccion'], axis=1)


DESCRIBIR EL DATAFRAME
personal.info()


TIPOS DE DATOS EN LAS COLUMNAS
personal.dtypes




CANTIDAD DE REGISTROS REPETIDOS



MOSTRAR COLUMNAS
personal.get("phone1")


BUSCAR CON PYTHON

Opcion 1
personal.sort_values("phone1", inplace = False)
filter = personal["phone1"]=="+56990896196"
personal.where(filter)


print (personal.where(filter,axis=1)) 

Syntax:
	DataFrame.where(cond, other=nan, inplace=False, axis=None, level=None,
        errors=’raise’, try_cast=False, raise_on_error=None)
 

Parameters:
	cond: One or more condition to check data frame for.
	other: Replace rows which don’t satisfy the condition with user defined object, 	Default is NaN
	inplace: Boolean value, Makes changes in data frame itself if True
	axis: axis to check( row or columns)


Opción 2
personal.loc[personal['phone1'] == "7498176"]

	print(df.loc[df['B'].isin(['one','three'])])



GUARDAR RESULTADO DE DATAFRAME COMO CSV
personal.to_csv('preproc.csv', header=False, index=False)


CREAR UN DATAFRAME  DE UN SPLIT 
otro = pd.DataFrame(personal2.nombre.str.split(' ',1,expand=False).tolist(),
                                   columns = ['nombrecito1','nombrecito2'])



df = pd.read_csv('sample_data.csv',parse_dates=True)

df['date'] = pd.to_datetime(df['date'])

df['year'] = df['date'].year
df['month'] = df['date'].month


REMPLAZAR UN VALOR DADO POR OTRO

prueba.loc[prueba['fechaFiniquito'].isin(['9999-12-31 00:00:00'])]
prueba=prueba.replace("9999-12-31 00:00:00", "")





*****************************

db.votes.aggregate([
   { $merge: {
         into: "monthlytotals",
         on: "_id",
         whenMatched:  [
            { $addFields: {
                thumbsup: { $add:[ "$thumbsup", "$$new.thumbsup" ] },
                thumbsdown: { $add: [ "$thumbsdown", "$$new.thumbsdown" ] }
            } } ],
         whenNotMatched: "insert"
   } }
])


163060019




