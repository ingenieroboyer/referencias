
////////// //////   TRANSFORMACION   //////      /////////    ////////// //////   TRANSFORMACION   //////  //////////     ///////// //////   TRANSFORMACION   //////  /////////
Encontrar un valor
	df.loc[df['column_name'] != some_value] --> excluye el criterio
	df.loc[df['column_name'] == some_value]

Encontrar por indice
	df.index[2]

Mostrar solo un grupo de columnas
	con42dias.iloc[:,17:22]

	# Multiple row and column selections using iloc and DataFrame
	data.iloc[0:5] # first five rows of dataframe
	data.iloc[:, 0:2] # first two columns of data frame with all rows
	data.iloc[[0,3,6,24], [0,5,6]] # 1st, 4th, 7th, 25th row + 1st 6th 7th columns.
	data.iloc[0:5, 5:8] # first 5 rows and 5th, 6th, 7th columns of data frame (county -> phone1).



convertir a minúscula / minùscula / minuscula 
workers['DomainLogin'].str.lower()

Encontrar APROXIMADO
	db.getCollection('pilas3').find({lastname1:/.*boy.*/})


Encontrar con un criterio y presentar solo algunas columnas
Filtrar
	usuarios_sub.loc[(usuarios_sub['diferenciafloat'] == 42)] .filter(items=['cliente_id', 'estado'])

COMPARAR ENTRE DF DIFERENTES
	df.loc[df.Name.isin(df1.Name), ['Nonprofit', 'Education']] = df1[['Nonprofit', 'Education']]   !!!


Encontrar cuando hay una clave que existe en dos dataframe
	result3= pd.merge(users, pagagos, on=['user_id'], how='inner')
	--> encontrará los usuarios en tabla de pagagos


Encontrar los valores únicos irrepetidos llaves
	acuerdosFil["tipoTarjeta"].unique()


Recoger los registros segun última fecha , ultimos  y borrar aquellos usuarios que se duplican

	acuerdosFil = acuerdos.sort_values('updatedAt').drop_duplicates(['user_id'], keep='last')



	

Contar cuantos registros nullos tiene una columna de un dataframe
	
Si una columna tiene un valor
	data['rut'].isna().any()

	df.isna().any()


Quitar con un valor especìfico
df[df.name != 'Tina']




NUEVO DF CON SOLO ALGUNAS COLUMNAS DE OTRO DF
sett=data[['rut','fecha_nacimiento']]  #  extraerá solo esas dos columnas


EXTRAER LOS VALORES QUE TIENEN EL UNION COMO NULL
	otro=data.loc[:, data.isna().any()]


Eliminar las filas cuando un campo es nulo
	data = data.dropna(axis=0, subset=['rut'])

Eliminar las filas cuando un TIENE UN VALOR ESPECÍFICO  "111111111"
	fijo_cdf=fijo_cdf[fijo_cdf.rut != '111111111']  ##ELIMINAR

Elimina filas cuando una columna tiene un valor null
	grupo3 = grupo2[grupo2.fecha_pago_x.isnull()]




Eliminar los ceros a la izquierda
	fichaRut.rut=fichaRut.rut.str.lstrip('0')	

Eliminar el último valor de una columna
	preli['ficha']=preli['rut'].str[:-1]


Reemplazar valor de una columna con condición null
	resultado3.loc[resultado3["username"].isnull(),'username'] = resultado3["appaterno"]




Extraer desde csv con una sola columna
	df=pd.read_csv("/home/tecnoboy/Escritorio/salida.csv",sep='\t',names=['col'], engine='c')



Sacar los pares
	pares=df.iloc[::2]


CREA UNA NUEVA COL 3 QUE SUSTITUYE LOS VALORES NaN (nulos) de una COL 1
 df["COL3"] = df["COL1"].fillna(df["COL2"])
	iDf2.a.fillna(iDf2.b, inplace=True)



SELECCIONAR FILAS
Con un valor
df.loc[df['column_name'] == some_value]	

Con valores iterables
df.loc[df['column_name'].isin(some_values)]






fmer
Varias condiciones 
df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]

Excluyente
df.loc[df['column_name'] != some_value]


Maximizar
df['Name'].max()


ELIMINAR DUPLICADOS
df = df.drop_duplicates()

Eliminar duplicados por nombre de columna
	muestra2=data.drop_duplicates(['rut'], keep='last')



ELIMINAR VARIAS COLUMNAS
admin=admin.drop(['id', 'nombre'], axis=1)



AGRUPAR Y MAXIMIZAR
		sindicatoCNN=resultado.groupby(['ficha','valor']).agg({'mes':'max'})
		nota: no sale un dataframe de allì, sino la serie que maximiza los valores


FUSIONAR
	resultado= pd.merge(mergedStuff, otro, on=['rut'], how='outer')


CONVERTIR A STRING UNA COLUMNA
	nuevo2['ficha']=nuevo2['ficha'].apply(str)




Renombrar columnas
	df.rename(columns={"A": "a", "B": "c"})








********************

df = pd.read_csv(file_path, sep='\t', encoding='latin 1', dtype = str, keep_default_na=False, na_values='')



temp = temp.replace('$$>\n', '%%NEWLINE%%').replace('\n','').replace('%%NEWLINE%%', '\n')
big_df = pd.read_csv(StringIO(temp), ...)


df.applymap(lambda x: x if pd.isnull(x) else (1 if x > 0.3 else 0))




****
import ast
c=1
for i in consi['admin']:
    dict = ast.literal_eval(i)
    ot=dict[0]
    if i=='NI':
        print(i)
        
    else:
        
            if ot['discharge_date'] == None:
                consi['estado']='activo'
            else:
                consi['estado']='inactivo'

        
    c=c+1

*****



////////// //////   CARGA   //////      /////////    ////////// //////   CARGA   //////  //////////     ///////// //////   CARGA   //////  /////////

DESDE Y HACIA  MONGODB 

___desde
	import pymongo
	import pandas as pd
	from pymongo import MongoClient

	client = MongoClient()
	db = client.erme
	collection = db.test
	data = pd.DataFrame(list(collection.find()))

___hacia
	collection.insert_many(admin.to_dict('records'))



CONFLICTOS CARGA:
	Convertir a object antes de cargar
	df[['_updated_at']] = df[['_updated_at']].astype(object).where(df[['_updated_at']].notnull(), None)





DESDE Y HACIA CSV

__hacia
sind.to_csv('sind.csv', index=False)

__desde
consindicato=pd.read_csv("/home/tecnoboy/CRECER/trato_data/data/trabajadadores/consindicato.csv")





*****************//////////GRAFICANDO\\\\\\\\\\\**************

invento2 = usuarios_sub.groupby('diferenciafloat')['email'].count()
invento2.plot(kind='bar');
	grafica cantidad de registros no nulos en columna email contra diferenciafloat( que contiene un numero flotante por registro)
























